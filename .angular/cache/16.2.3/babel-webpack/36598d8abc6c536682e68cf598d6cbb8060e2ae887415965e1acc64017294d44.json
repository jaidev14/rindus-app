{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../app-config\";\nexport class ApiService {\n  constructor(appConfig) {\n    this.appConfig = appConfig;\n  }\n  get(path, options) {\n    const url = this.getRequestUrl(path);\n    return fetch(url).then(response => response.json());\n  }\n  post(path, body, options) {\n    const url = this.getRequestUrl(path);\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        title: 'foo',\n        body: 'bar',\n        userId: 1\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => console.log(json));\n  }\n  put(path, body, options) {\n    const url = this.getRequestUrl(path);\n    fetch(url, {\n      method: 'PUT',\n      body: JSON.stringify({\n        id: 1,\n        title: 'foo',\n        body: 'bar',\n        userId: 1\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => console.log(json));\n  }\n  patch(path, body, options) {\n    const url = this.getRequestUrl(path);\n    fetch(url, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        title: 'foo'\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => console.log(json));\n  }\n  delete(path, body, options) {\n    const url = this.getRequestUrl(path);\n    fetch(url, {\n      method: 'DELETE'\n    });\n  }\n  getRequestUrl(path) {\n    return this.appConfig.apiEndpoint + path.replace(/^\\//, '');\n  }\n}\n_class = ApiService;\n_class.ɵfac = function ApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AppConfig));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["ApiService","constructor","appConfig","get","path","options","url","getRequestUrl","fetch","then","response","json","post","body","method","JSON","stringify","title","userId","headers","console","log","put","id","patch","delete","apiEndpoint","replace","i0","ɵɵinject","i1","AppConfig","factory","ɵfac","providedIn"],"sources":["/home/jaidev/WebDev/rindus-app/src/app/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AppConfig } from '../app-config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(\n    private appConfig: AppConfig\n  ) { }\n\n  get(path: string, options?: object) {\n    const url = this.getRequestUrl(path);\n    return fetch(url)\n      .then((response) => response.json());\n  }\n\n  post(path: string, body?: any, options?: object) {\n    const url = this.getRequestUrl(path);\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        title: 'foo',\n        body: 'bar',\n        userId: 1,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    })\n      .then((response) => response.json())\n      .then((json) => console.log(json));\n  }\n\n  put(path: string, body?: any, options?: object) {\n    const url = this.getRequestUrl(path);\n\n    fetch(url, {\n      method: 'PUT',\n      body: JSON.stringify({\n        id: 1,\n        title: 'foo',\n        body: 'bar',\n        userId: 1,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    })\n      .then((response) => response.json())\n      .then((json) => console.log(json));\n  }\n\n  patch(path: string, body?: any, options?: object) {\n    const url = this.getRequestUrl(path);\n\n    fetch(url, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        title: 'foo',\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    })\n      .then((response) => response.json())\n      .then((json) => console.log(json));\n  }\n\n  delete(path: string, body?: any, options?: object) {\n    const url = this.getRequestUrl(path);\n\n    fetch(url, {\n      method: 'DELETE',\n    });\n  }\n\n  getRequestUrl(path: string) {\n    return this.appConfig.apiEndpoint + path.replace(/^\\//, '');\n  }\n\n}\n"],"mappings":";;;AAMA,OAAM,MAAOA,UAAU;EAErBC,YACUC,SAAoB;IAApB,KAAAA,SAAS,GAATA,SAAS;EACf;EAEJC,GAAGA,CAACC,IAAY,EAAEC,OAAgB;IAChC,MAAMC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACH,IAAI,CAAC;IACpC,OAAOI,KAAK,CAACF,GAAG,CAAC,CACdG,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC;EACxC;EAEAC,IAAIA,CAACR,IAAY,EAAES,IAAU,EAAER,OAAgB;IAC7C,MAAMC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACH,IAAI,CAAC;IAEpCI,KAAK,CAACF,GAAG,EAAE;MACTQ,MAAM,EAAE,MAAM;MACdD,IAAI,EAAEE,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,KAAK;QACZJ,IAAI,EAAE,KAAK;QACXK,MAAM,EAAE;OACT,CAAC;MACFC,OAAO,EAAE;QACP,cAAc,EAAE;;KAEnB,CAAC,CACCV,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEE,IAAI,IAAKS,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC,CAAC;EACtC;EAEAW,GAAGA,CAAClB,IAAY,EAAES,IAAU,EAAER,OAAgB;IAC5C,MAAMC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACH,IAAI,CAAC;IAEpCI,KAAK,CAACF,GAAG,EAAE;MACTQ,MAAM,EAAE,KAAK;MACbD,IAAI,EAAEE,IAAI,CAACC,SAAS,CAAC;QACnBO,EAAE,EAAE,CAAC;QACLN,KAAK,EAAE,KAAK;QACZJ,IAAI,EAAE,KAAK;QACXK,MAAM,EAAE;OACT,CAAC;MACFC,OAAO,EAAE;QACP,cAAc,EAAE;;KAEnB,CAAC,CACCV,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEE,IAAI,IAAKS,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC,CAAC;EACtC;EAEAa,KAAKA,CAACpB,IAAY,EAAES,IAAU,EAAER,OAAgB;IAC9C,MAAMC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACH,IAAI,CAAC;IAEpCI,KAAK,CAACF,GAAG,EAAE;MACTQ,MAAM,EAAE,OAAO;MACfD,IAAI,EAAEE,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE;OACR,CAAC;MACFE,OAAO,EAAE;QACP,cAAc,EAAE;;KAEnB,CAAC,CACCV,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEE,IAAI,IAAKS,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC,CAAC;EACtC;EAEAc,MAAMA,CAACrB,IAAY,EAAES,IAAU,EAAER,OAAgB;IAC/C,MAAMC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACH,IAAI,CAAC;IAEpCI,KAAK,CAACF,GAAG,EAAE;MACTQ,MAAM,EAAE;KACT,CAAC;EACJ;EAEAP,aAAaA,CAACH,IAAY;IACxB,OAAO,IAAI,CAACF,SAAS,CAACwB,WAAW,GAAGtB,IAAI,CAACuB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAC7D;;SA3EW3B,UAAU;;mBAAVA,MAAU,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,SAAA;AAAA;;SAAV/B,MAAU;EAAAgC,OAAA,EAAVhC,MAAU,CAAAiC,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}